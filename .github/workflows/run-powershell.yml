name: Run Powershell

on:
  workflow_dispatch:
    inputs:
      script-path:
        type: string
        default: ./scripts/deploy.ps1
      location:
        type: string
        default: switzerlandnorth
      management-group-id:
        type: string
        default: null
      name-prefix:
        type: string
        default: null
      engine-app-name:
        type: string
        default: null
      resource-names:
        type: string
        default: |
          {
            "functionName": "func-ipam-prod-swn",
            "appServiceName": "app-ipam-prod-swn",
            "functionPlanName": "asp-func-ipam-prod-swn",
            "appServicePlanName": "asp-app-ipam-prod-swn",
            "cosmosAccountName": "cosno-ipam-prod-swn",
            "cosmosContainerName": "ctr-ipam-prod-swn",
            "cosmosDatabaseName": "cosmos-ipam-prod-swn",
            "keyVaultName": "kv-ipam-prod-swn",
            "workspaceName": "log-ipam-prod-swn",
            "managedIdentityName": "id-ipam-prod-swn",
            "resourceGroupName": "rg-ipam-prod-swn",
            "storageAccountName": "st-ipam-prod-swn",
            "containerRegistryName": "cr-ipam-prod-swn"
          }

permissions:
  id-token: write
  contents: read

jobs:
  powershell:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out
        uses: actions/checkout@v3

      - name: Login Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Run Azure PowerShell inline script
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $location = '${{ inputs.location }}'
            $disableUI = $true
            $mgmtGroupId = '${{ inputs.management-group-id }}'
            $namePrefix = '${{ inputs.name-prefix }}'
            $engineAppName = '${{ inputs.engine-app-name }}'
            $resourceNames = '${{ inputs.resource-names }}' | ConvertFrom-Json -AsHashtable

            $arguments = @{
              Location = $location
              DisableUI = $disableUI
            }

            if ($mgmtGroupId -ne "") {
              $arguments.Add("MgmtGroupId", $mgmtGroupId)
              Write-Host "MgmtGroupId NOT EMPTY"
            }

            if ($namePrefix -ne "") {
              $arguments.Add("NamePrefix", $namePrefix)
              Write-Host "NamePrefix NOT EMPTY"
            }

            if ($engineAppName -ne "") {
              $arguments.Add("EngineAppName", $engineAppName)
              Write-Host "EngineAppName NOT EMPTY"
            }

            if ($resourceNames -ne "") {
              $arguments.Add("ResourceNames", $resourceNames)
              Write-Host "ResourceNames NOT EMPTY"
            }

            Write-Host "Location = ${location}"
            Write-Host "DisableUI = ${disableUI}"
            Write-Host "MgmtGroupId = ${mgmtGroupId}"
            Write-Host "NamePrefix = ${namePrefix}"
            Write-Host "ResourceNames = $($resourceNames | ConvertTo-Json -Compress)"

            $scriptPath = '${{ inputs.script-path }}'
            & $scriptPath @arguments
          azPSVersion: "latest"
